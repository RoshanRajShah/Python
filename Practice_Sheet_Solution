{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"EpN1k1J0Na2I"},"outputs":[],"source":["# Problem 1\n","\n","for i in range(1, 201):\n","\n","    if i % 2 == 0 or i % 3 == 0:\n","        print(i)\n","\n","# range takes three arguments, first is the starting number for i and second is the ending number (which isn't included) and third is step\n","\n"]},{"cell_type":"code","source":["# Problem 2 \n","\n","f = open(\"squares.txt\", \"w\")\n","\n","numbers = []\n","\n","for i in range(6):\n","    numbers.append(int(input()))\n","\n","numbers.reverse()\n","\n","for number in numbers:\n","    f.write(str(number) + \" \" + str(number**2) + \"\\n\")\n","\n","f.close()\n","\n","# At first we open the file giving the open method it's path and mode, \"w\" is for write mode, and \"r\" is for read only mode\n","# we create a list called numbers and loop 6 times taking input using numbers.append which is a built in function in python\n","# We use another built in function called reverse \"numbers.reverse\" then we loop over the list of numbers writing them into the file\n","\n","# NOTE: we use print when the question says \"write something to the screen\" and we use write when they say \"print something into a file\""],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EZK-BVFdSdC3","executionInfo":{"status":"ok","timestamp":1668436834680,"user_tz":-60,"elapsed":6672,"user":{"displayName":"Roshan Raj Shah","userId":"06387599595301221247"}},"outputId":"e4a125b4-de13-41fe-e290-4dd62052d0ae"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1\n","2\n","3\n","4\n","5\n","6\n","6 36\n","\n","5 25\n","\n","4 16\n","\n","3 9\n","\n","2 4\n","\n","1 1\n","\n","Array contents in sample.txt:  6 36\n","5 25\n","4 16\n","3 9\n","2 4\n","1 1\n","\n"]}]},{"cell_type":"code","source":["#Problem 3 \n","\n","n = int(input())\n","\n","for i in range(n):\n","\n","    for j in range(i+1):\n","        print(chr(65+j), end=\"\")\n","        \n","    print(\"\")\n","\n","# in Python /n is quite useless since print() adds it automatically and if we don't need a new line we use end=\"\"\n","# The i loop is used to create individual rows, it runs the j loop inside of it a multiple times and we print(\"\") after it to add the new\n","# line, and the j loop is to print each line (AKA columns) which use ASCII to print the letters as they requested. the j loop\n","# uses a range up to i+1 because range excludes the number inside of it, so if we exclude 0 on the first run it prints nothing\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5BbJUb0mlr9z","executionInfo":{"status":"ok","timestamp":1670773712896,"user_tz":-60,"elapsed":3755,"user":{"displayName":"Ahmed Almoulki","userId":"08066588908007697623"}},"outputId":"183630a3-1da0-44fc-d7f4-49808a91f070"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["6\n","A\n","AB\n","ABC\n","ABCD\n","ABCDE\n","ABCDEF\n"]}]},{"cell_type":"code","source":["#Problem 4\n","\n","\n","def to_meters(foot, inch):\n","    meters = foot * 30.5 / 100 + inch * 2.54 / 100\n","    return meters\n","\n","\n","while True:\n","\n","    feet = int(input())\n","    inches = int(input())\n","\n","    if feet != 0 and inches != 0:\n","        print(to_meters(feet, inches))\n","    else:\n","        break\n","    \n","# NOTE: True and False are always capitalized in Python, and also don't forget colons for loops, methods, and if conditionals\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"h39TdKX0ptH8","executionInfo":{"status":"ok","timestamp":1668439089219,"user_tz":-60,"elapsed":6036,"user":{"displayName":"Roshan Raj Shah","userId":"06387599595301221247"}},"outputId":"8b71af3f-4366-4fa4-9d93-52b483756ccc"},"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["12\n","5\n","In m = 3.79\n","0\n","0\n"]}]},{"cell_type":"code","source":["# Problem 5\n","\n","while True:\n","    \n","    counter = 0 # start counting from 0\n","    password = input(\"Password: \") # Taking the password as input\n","\n","    for c in password:\n","        # c.isnumeric means is the letter c a number? and if it is the if statement adds 1 to the counter to count the number of numbers in the password\n","        if c.isnumeric():\n","            counter = counter + 1\n","    \n","    # Password check\n","    if len(password) >= 8 and counter >= 3:\n","        print(\"PASSWORD IS GOOD\")\n","    elif len(password) == 0:\n","        break\n","    else:\n","        print(\"PASSWORD IS BAD\")\n","\n","\n","# After ANY method we add () even if it doesn't take anything and if it does (for example to_meters(foot, inch))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"c2xBOag17FWL","executionInfo":{"status":"ok","timestamp":1668445918694,"user_tz":-60,"elapsed":23995,"user":{"displayName":"Roshan Raj Shah","userId":"06387599595301221247"}},"outputId":"61ed5a83-280c-4efa-ff8c-67048670cc8e"},"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["got\n","Password Too short.\n","Helloworld123\n","3 10\n","PASSWORD IS GOOD\n","\n"]}]},{"cell_type":"code","source":["# Problem 6 \n","\n","def substitute_vowels(str, ch):\n","\n","    vow = ['a', 'e', 'i', 'o', 'u']\n","    output = \"\"\n","\n","    for l in str:\n","        if l in vow:\n","            output += ch\n","        else:\n","            output += l\n","\n","    return output\n","\n","  # In this one you just need to focus on how we take two strings from whoever calls the method and return one method after we optimize it. * WHAT??*\n","  # We also use the string output to store our modified string. we only add the charater to it if it's a vowel, otherwise we add the character ch.\n","  # Using the for loop and the if conditional inside of it\n","  #* I get it but I cant do it myself... I understand the code without even looking at the question. I just dont know how to do it myself... question confuses me so much!!"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fFchKoGkEFnB","executionInfo":{"status":"ok","timestamp":1668445649765,"user_tz":-60,"elapsed":6642,"user":{"displayName":"Roshan Raj Shah","userId":"06387599595301221247"}},"outputId":"4077c2de-2b9a-42be-ad3c-e5ab2a978300"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Hello World\n","5\n","h5ll5 w5rld\n"]}]},{"cell_type":"code","source":["# Problem 7\n","\n","while True:\n","    n = int(input())\n","    if n > 100:\n","        print(f\"{n * 30//100} Euro and {(n * 30) % 100} Cents\")\n","    elif n > 50:\n","        print(f\"{n * 38//100} Euro and {(n * 38) % 100} Cents\")\n","    elif n >= 0:\n","        print(f\"{n * 45//100} Euro and {(n * 45) % 100} Cents\")\n","    else:\n","        break\n","\n","  # This question is simple, you just have to make sure your if statements are put IN THIS EXACT ORDER because you always check\n","  # For the biggest number first (n > 100) because if n is larger than 100 but your if asks if it's bigger than 50 first, then it's gonna cause a logical\n","  # Mistake and run the code associated with 50 instead of 100.\n","\n","  # SO Long story short, with \"n >\" we compare the bigger numbers first, with \"n <\" we compare the smallest first\n","  # *QUESTION*... why isnt euro and cents in seperate quotations marks... please dont confuse me with fancy shortcuts "],"metadata":{"id":"Sx1k75XIK1DF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1668702245462,"user_tz":-60,"elapsed":4336,"user":{"displayName":"Roshan Raj Shah","userId":"06387599595301221247"}},"outputId":"eb612624-016b-4198-b2b0-822150bf5e9b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter Number of pen you want to buy.25\n","11.25 11 25.0\n"]}]},{"cell_type":"code","source":["# Problem 8\n","\n","def minimum(numbers):\n","    min = numbers[0]\n","\n","    for number in numbers:\n","        if number < min:\n","            min = number\n","\n","    return min\n","\n","  # This is infinitely simple, you just loop through the list of numbers and you see if a number is smaller than the minimum, you make it the minimum\n","  # Which is the commonly used way to find the smallest/biggest number of any list\n","  # QUESTION.... did not even understand the question but the code is easy.... is this just something I should memorise? ... why list of [0]?... actually whats going on?"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gSA52R-cZxib","executionInfo":{"status":"ok","timestamp":1674580472055,"user_tz":-120,"elapsed":10,"user":{"displayName":"Moe","userId":"10628381199605467600"}},"outputId":"f369ffaa-91c3-4a10-b861-86bef8e70303"},"execution_count":1,"outputs":[{"output_type":"execute_result","data":{"text/plain":["-1"]},"metadata":{},"execution_count":1}]},{"cell_type":"code","source":["# Problem 9\n","\n","start_length, end_length, step_size = int(input()), int(input()), int(input()) # Get all 3 inputs in one line that's all\n","\n","values = {} # The values we're going to print, stored a dict, a dict is basically keys associated with values\n","\n","# We loop from start_length to end_length + step_size and step step_size with every run. And store the keys as mile numbers and values as meter numbers\n","for i in range(start_length, end_length + 1, step_size):\n","    values[i] = i * 1609.344\n","\n","# This is a placeholder that uses formatting, {} means variable, {:>4} means place 4 spaces here and substitute with a variable at the end\n","# And {:0.3f} Means show only 3 numbers after the decimal point and substitute for a value.\n","placeholder = \"{} {:>4}{:0.3f}\"\n","\n","# Print table header\n","print(\"mile           m\")\n","\n","# We print our table\n","for i in values.keys():\n","    print(placeholder.format(i, \"\", values[i]))\n","\n","#Is the first line just something i memorise? it looks easy af.... wtf do u mean by dict?... im lost after first line. NEED TO KNOW BASICS. ALEX PLEASE BREAK DOWN THESE QUESTIONS!!\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hUTNcusdtPJS","executionInfo":{"status":"ok","timestamp":1668965146300,"user_tz":-60,"elapsed":4637,"user":{"displayName":"Roshan Raj Shah","userId":"06387599595301221247"}},"outputId":"19e33a62-f293-4cee-c9d1-c61e6d2728c1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["10\n","50\n","10\n","mile  m    \n","10    16093.440\n","20    32186.880\n","30    48280.320\n","40    64373.760\n"]}]},{"cell_type":"code","source":["# Problem 10\n","\n","start_length, end_length, step_size, file_name = int(input()), int(input()), int(input()), input(\"File: \")\n","\n","# Here we do the same thing, but we take a fourth input which is the name of a file that we will write the inputs into if it's not = 0\n","\n","values = {}\n","placeholder = \"\"\n","\n","for i in range(start_length, end_length + step_size, step_size):\n","    values[i] = i * 1609.344\n","\n","if len(file_name) == 0:\n","\n","    placeholder += \"{} {:>4}{:0.3f}\"\n","\n","    for i in values.keys():\n","        print(placeholder.format(i, \"\", values[i]))\n","\n","else:\n","\n","    # Open file -> User similar placeholder notation -> write values into the file -> Close the file\n","    f = open(file_name, \"w\")\n","    placeholder += \"{:0.3f}\\n\"\n","\n","    for i in values:\n","        f.write(placeholder.format(values[i]))\n","\n","    f.close()\n","  # I know how to open and close and write and read in a file but i dont know why when who how its used here \n","    "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zGvag79Kvocv","executionInfo":{"status":"ok","timestamp":1669230266171,"user_tz":-60,"elapsed":8690,"user":{"displayName":"Roshan Raj Shah","userId":"06387599595301221247"}},"outputId":"aded9abf-8370-4c6a-d0af-6e87a4a43327"},"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["10\n","50\n","10\n","f1.txt\n"]}]},{"cell_type":"code","source":["file = open('f2.txt','w')\n","\n","file.write('2 3')\n","\n","file.close()"],"metadata":{"id":"36PUIpanNZku"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Problem 11\n","\n","file_name = input()\n","\n","try:\n","    f1 = open(file_name, \"r\")\n","except FileNotFoundError:\n","    print(\"File not found. Program terminated\")\n","    exit(1)\n","\n","nums_list = f1.readline().split() \n","\n","first_number = int(nums_list[0])\n","second_number = int(nums_list[1])\n","\n","f1.close() \n","\n","try:\n","    f2 = open(\"division.txt\", \"w\")\n","    f2.write(str(first_number / second_number))\n","except ZeroDivisionError:\n","    print(\"Division by zero not permitted.\")\n","    exit(2)\n","\n","f2.close()"],"metadata":{"id":"U60Dr5r06_f7","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1668972188059,"user_tz":-60,"elapsed":6154,"user":{"displayName":"Roshan Raj Shah","userId":"06387599595301221247"}},"outputId":"65e887d1-5047-4c2b-c898-19119f846fe4"},"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["Enter File name: f2.txt\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:24: RuntimeWarning: divide by zero encountered in double_scalars\n"]}]},{"cell_type":"code","source":["# Problem 12\n","\n","\n","stack = []\n","\n","\n","def push(n):\n","    stack.append(n)\n","\n","\n","def pop():\n","    stack.pop()\n","\n","\n","def is_empty():\n","    if len(stack) == 0:\n","        return True\n","    else:\n","        return False\n","\n","\n","while True:\n","\n","    command = input().lower()\n","\n","    if 's' in command:\n","        push(command.split()[1])\n","    elif command == 'p':\n","      print(stack[-1])\n","      pop()\n","    elif command == 'e':\n","        while not is_empty():\n","          print(stack[-1])\n","          pop()\n","    elif command == 'q':\n","        exit(0)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Lnn9IgMXgH46","executionInfo":{"status":"ok","timestamp":1669002495860,"user_tz":-60,"elapsed":3385,"user":{"displayName":"Roshan Raj Shah","userId":"06387599595301221247"}},"outputId":"d8228deb-dc54-462f-aebe-c696b208e7a1"},"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["Input the letter: \n","\n","Input the letter: q\n"]}]},{"cell_type":"code","source":["# Problem 12\n","\n","\n","from collections import deque\n","\n","stack = deque()\n","\n","\n","def push(n):\n","    stack.append(n)\n","\n","\n","def pop():\n","    return stack.pop()\n","\n","\n","def is_empty():\n","    if len(stack) == 0:\n","        return True\n","    else:\n","        return False\n","\n","\n","while True:\n","    command = input().lower()\n","\n","    if 's' in command:\n","        push(command.split()[1])\n","    elif command == 'p':\n","        print(pop())\n","    elif command == 'e':\n","        while not is_empty():\n","            print(pop())\n","    elif command == 'q':\n","        exit(0)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nuOfqLEW_-tY","executionInfo":{"status":"ok","timestamp":1669003826349,"user_tz":-60,"elapsed":87468,"user":{"displayName":"Roshan Raj Shah","userId":"06387599595301221247"}},"outputId":"74a7a8d0-fc67-43eb-e6df-f4f07c10d6d9"},"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["Input the letter: s\n","Enter Element to push: 1\n","Input the letter: s\n","Enter Element to push: 2\n","Input the letter: s\n","Enter Element to push: 3\n","Input the letter: s\n","Enter Element to push: 4\n","Input the letter: p\n","Element Poped\n","4\n","Input the letter: c\n","Stack cleared.\n","Input the letter: e\n","['is_empty']\n","Input the letter: s\n","Enter Element to push: 1\n","Input the letter: e\n","['not empty']\n","Input the letter: q\n"]}]},{"cell_type":"code","source":["# Problem 13\n","\n","# a) Using a list (Same shit but it's a list where the first thing to go in goes out first)\n","stack = []\n","\n","def push(n):\n","    stack.append(n)\n","\n","\n","def pop():\n","    stack.pop(0)\n","\n","\n","def is_empty():\n","    if len(stack) == 0:\n","        return True\n","    else:\n","        return False\n","\n","\n","while True:\n","    command = input().lower()\n","\n","    if 's' in command:\n","        push(command.split()[1])\n","    elif command == 'p':\n","      print(stack[0])\n","      pop()\n","    elif command == 'e':\n","        while not is_empty():\n","          print(stack[0])\n","          pop()\n","    elif command == 'q':\n","        exit(0)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ikRzcshyYZsy","executionInfo":{"status":"ok","timestamp":1669006341861,"user_tz":-60,"elapsed":84527,"user":{"displayName":"Roshan Raj Shah","userId":"06387599595301221247"}},"outputId":"c8e79994-82d8-460f-c9af-a11b7d647078"},"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["Input the letter: s\n","Enter number to push: 1\n","Input the letter: s\n","Enter number to push: 2\n","Input the letter: s\n","Enter number to push: 3\n","Input the letter: s\n","Enter number to push: 4\n","Input the letter: p\n","Element Poped\n","1\n","Input the letter: p\n","Element Poped\n","2\n","Input the letter: \n","[3, 4]\n","Input the letter: e\n","['not empty']\n","Input the letter: p\n","Element Poped\n","3\n","Input the letter: p\n","Element Poped\n","4\n","Input the letter: e\n","['is_empty']\n","Input the letter: \n","[]\n","Input the letter: q\n"]}]},{"cell_type":"code","source":["# Problem 13\n","\n","# b) Using a deque (Same FIFO stuff but with a deque instead of a list)\n","from collections import deque\n","\n","stack = deque()\n","\n","\n","def push(n):\n","    stack.append(n)\n","\n","\n","def pop():\n","    return stack.popleft()\n","\n","\n","def is_empty():\n","    if len(stack) == 0:\n","        return True\n","    else:\n","        return False\n","\n","\n","while True:\n","    command = input().lower()\n","\n","    if 's' in command:\n","        push(command.split()[1])\n","    elif command == 'p':\n","        print(pop())\n","    elif command == 'e':\n","        while not is_empty():\n","            print(pop())\n","    elif command == 'q':\n","        exit(0)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"D0nRyJlTiE9X","executionInfo":{"status":"ok","timestamp":1669006492129,"user_tz":-60,"elapsed":86013,"user":{"displayName":"Roshan Raj Shah","userId":"06387599595301221247"}},"outputId":"9318b147-9dae-4c34-b200-088da551a8eb"},"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["Input the letter: s\n","Enter Element to push: 1\n","Input the letter: s\n","Enter Element to push: 2\n","Input the letter: s\n","Enter Element to push: 3\n","Input the letter: s\n","Enter Element to push: 4\n","Input the letter: \n","deque(['1', '2', '3', '4'])\n","Input the letter: p\n","Element Poped\n","1\n","Input the letter: \n","deque(['2', '3', '4'])\n","Input the letter: e\n","['not empty']\n","Input the letter: c\n","Stack cleared.\n","Input the letter: e\n","['is_empty']\n","Input the letter: q\n"]}]},{"cell_type":"code","source":["# Problem 14\n","\n","class Person: \n","    # Simple class constructor (__init__ means initialize, which is the values that are assigned to the object when it's created)\n","    def __init__(self, first_name, last_name, profession):\n","        self.first_name = first_name\n","        self.last_name = last_name\n","        self.profession = profession\n","\n","    # Simple string to print when the object is printed\n","    def __str__(self):\n","    return 'Name: ' + str(self.first_name)+ ' ' + str(self.last_name) + '\\n' + 'Profession: ' + self.profession"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"X5gSXbspou7g","executionInfo":{"status":"ok","timestamp":1669031551507,"user_tz":-60,"elapsed":990,"user":{"displayName":"Roshan Raj Shah","userId":"06387599595301221247"}},"outputId":"3e266bfc-b972-42b5-a58a-5c94352d268a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Name: Johnny Boy\n","Profession: Lab-Boy\n","Johnny\n","Boy\n","Lab-Boy\n"]}]},{"cell_type":"code","source":["# Problem 15\n","\n","class Person:\n","\n","    # Initialize using first and last name and profession\n","    def __init__(self, first_name, last_name, profession):\n","        self.first_name = first_name\n","        self.last_name = last_name\n","        self.profession = profession\n","\n","    def __str__(self):\n","        return ('Name: ' + str(self.name)+ ' ' + str(self.lname) + '\\n' + 'Profession: ' + self.profession)\n","\n","\n","    # Overloads the == operator (so when it's used on two objects it's actually supported and doesn't return an error)\n","    # Where it compares the two objects based on their data fields (in this case first_name and last_name)\n","    def __eq__(self, o):\n","        if self.last_name == o.last_name and self.first_name == o.first_name:\n","            return True\n","        else:\n","            return False\n","\n","    # This overloads the > (greater than) operator in the same way\n","    def __gt__(self, o):\n","        if self.last_name == o.last_name:\n","            if self.first_name > o.first_name:\n","                return True\n","            else:\n","                return False\n","        elif self.last_name > o.last_name:\n","            return True\n","        else:\n","            return False\n","\n","    # This overloads the < (less than) operator in the same way\n","    def __lt__(self, o):\n","        if self.last_name == o.first_name:\n","            if self.first_name < o.last_name:\n","                return True\n","            else:\n","                return False\n","        elif self.last_name < o.last_name:\n","            return True\n","        else:\n","            return False\n","\n","obj1 = Person(\"John\", \"Peterson\", \"Doctor\")\n","obj2 = Person(\"Steven\", \"Jordanson\", \"Artist\")\n","\n","print(obj1 > obj2)\n","print(obj1 < obj2)\n","print(obj1 == obj2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bLKQLnRKCGsw","executionInfo":{"status":"ok","timestamp":1670862031561,"user_tz":-120,"elapsed":252,"user":{"displayName":"Moe","userId":"10628381199605467600"}},"outputId":"ef557917-ccf3-4697-fc88-d1e0bbcd69a1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["True\n","False\n","False\n"]}]},{"cell_type":"code","source":["# Problem 16\n","import random\n","\n","# The class is practically the same\n","class Person:\n","\n","    def __init__(self, first_name, last_name, profession):\n","        self.first_name = first_name\n","        self.last_name = last_name\n","        self.profession = profession\n","\n","    def __str__(self):\n","        return 'Name: ' + self.first_name + ' ' + self.last_name + '\\n' + 'Profession: ' + self.profession\n","\n","    def __eq__(self, o):\n","        if self.last_name == o.last_name and self.first_name == o.first_name:\n","            return True\n","        else:\n","            return False\n","\n","    def __gt__(self, o):\n","        if self.last_name == o.last_name:\n","            if self.first_name > o.first_name:\n","                return True\n","            else:\n","                return False\n","        elif self.last_name > o.last_name:\n","            return True\n","        else:\n","            return False\n","\n","    def __lt__(self, o):\n","        if self.last_name == o.first_name:\n","            if self.first_name < o.last_name:\n","                return True\n","            else:\n","                return False\n","        elif self.last_name < o.last_name:\n","            return True\n","        else:\n","            return False\n","\n","\n","# Creates a list of objects and makes 10 objects and stores them in the list\n","list_of_objects = []\n","\n","for i in range(10):\n","    list_of_objects.append(Person(\"first name \" + str(i), \"last name \" + str(i), \"profession \" + str(i)))\n","\n","# Shuffles then prints the list\n","random.shuffle(list_of_objects)\n","for ob in list_of_objects:\n","    print(ob)\n","\n","# Iterates over each object and sorts them via their last name\n","list_of_objects.sort(key=lambda o: o.last_name)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qZG4cCOlzAfi","executionInfo":{"status":"ok","timestamp":1671128560471,"user_tz":-120,"elapsed":8,"user":{"displayName":"Moe","userId":"10628381199605467600"}},"outputId":"d3984fd2-6928-45fd-a1ba-1966bd448cdd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Name: first name 0 last name 0\n","Profession: profession 0\n","Name: first name 6 last name 6\n","Profession: profession 6\n","Name: first name 5 last name 5\n","Profession: profession 5\n","Name: first name 4 last name 4\n","Profession: profession 4\n","Name: first name 2 last name 2\n","Profession: profession 2\n","Name: first name 3 last name 3\n","Profession: profession 3\n","Name: first name 9 last name 9\n","Profession: profession 9\n","Name: first name 1 last name 1\n","Profession: profession 1\n","Name: first name 8 last name 8\n","Profession: profession 8\n","Name: first name 7 last name 7\n","Profession: profession 7\n"]}]},{"cell_type":"code","source":["# Problem 17\n","import random\n","import pickle\n","\n","# Once again, the class is the same\n","class Person:\n","\n","    def __init__(self, first_name, last_name, profession):\n","        self.first_name = first_name\n","        self.last_name = last_name\n","        self.profession = profession\n","\n","    def __str__(self):\n","        return ('Name: ' + str(self.name)+ ' ' + str(self.lname) + '\\n' + 'Profession: ' + self.profession)\n","\n","    def __eq__(self, o):\n","        if self.last_name == o.last_name and self.first_name == o.first_name:\n","            return True\n","        else:\n","            return False\n","\n","    def __gt__(self, o):\n","        if self.last_name == o.last_name:\n","            if self.first_name > o.first_name:\n","                return True\n","            else:\n","                return False\n","        elif self.last_name > o.last_name:\n","            return True\n","        else:\n","            return False\n","\n","    def __lt__(self, o):\n","        if self.last_name == o.first_name:\n","            if self.first_name < o.last_name:\n","                return True\n","            else:\n","                return False\n","        elif self.last_name < o.last_name:\n","            return True\n","        else:\n","            return False\n","\n","# And this makes a list of objects just like the last problem\n","list_of_objects = []\n","\n","for i in range(10):\n","    list_of_objects.append(Person(\"first name \" + str(i), \"last name \" + str(i), \"profession \" + str(i)))\n","\n","random.shuffle(list_of_objects)\n","print(list_of_objects)\n","\n","list_of_objects.sort(key=lambda o: o.last_name)\n","\n","f = open(\"persons.dat\", \"wb\")\n","\n","# NEW PART: pickles each object and adds it into the file we just opened\n","for obj in list_of_objects:\n","    pickle.dump(obj, f)\n","\n","# Closing the file\n","f.close()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"T1BvrMELFmYd","executionInfo":{"status":"ok","timestamp":1671130001928,"user_tz":-120,"elapsed":416,"user":{"displayName":"Moe","userId":"10628381199605467600"}},"outputId":"c040fb98-6bdd-4c9b-8fd8-ad45a2c5968a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[<__main__.Person object at 0x7f5fd046cf70>, <__main__.Person object at 0x7f5fd046e1f0>, <__main__.Person object at 0x7f5fd046e0d0>, <__main__.Person object at 0x7f5fd046ccd0>, <__main__.Person object at 0x7f5fd046cd00>, <__main__.Person object at 0x7f5fd046e1c0>, <__main__.Person object at 0x7f5fd046ceb0>, <__main__.Person object at 0x7f5fd046cdc0>, <__main__.Person object at 0x7f5fd046cfd0>, <__main__.Person object at 0x7f5fd046e130>]\n"]}]},{"cell_type":"code","source":["# Problem 18\n","\n","import pickle\n","\n","# Open the file\n","f = open(\"persons.dat\", \"rb\")\n","\n","# load the contents of the file into persons variable\n","persons = pickle.load(f)\n","\n","# Close file and print output\n","f.close()\n","\n","print(persons)"],"metadata":{"id":"wQSGbq6WDS0k","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1669209439584,"user_tz":-60,"elapsed":2801,"user":{"displayName":"Roshan Raj Shah","userId":"06387599595301221247"}},"outputId":"b5144e97-2ee4-4b0e-a7d3-8c2ef93e8c61"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["d\n","Could not convert data to an integer.\n"]}]},{"cell_type":"code","source":["# Problem 19\n","\n","\n","# We define a rectangle class, with a simple initialization\n","class Rectangle:\n","\n","    def __init__(self, length, width):\n","        self.length = length\n","        self.width = width\n","\n","    # This overridloads addition so we can add the areas of two rectangles adding support to that operator\n","    def __add__(self, o):\n","        return self.width * self.length + o.width * o.length\n","\n","    # This overloads substraction so we can substract the areas of two rectangles adding support to that operator\n","    def __sub__(self, o):\n","        return self.width * self.length - o.width * o.length\n","\n","# Create a list of two rectanlges for testing, we create them via user input, and make sure we handle exceptions like last time\n","rectangles = []\n","\n","for i in range(2):\n","    try:\n","        input_width = int(input(\"Width: \"))\n","        input_length = int(input(\"Length: \"))\n","\n","        if input_width > 0 and input_length > 0:\n","            rec = Rectangle(input_length, input_width)\n","            rectangles.append(rec)\n","        else:\n","            raise ValueError\n","\n","    except ValueError:\n","        print(\"Invalid input.\")\n","        exit(1)\n","\n","# Simply printing for testing\n","print(rectangles[0] + rectangles[1])\n","print(rectangles[0] - rectangles[1])"],"metadata":{"id":"6Iq9RxrjOC6w"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"DQz_A6noL0Vm"},"execution_count":null,"outputs":[]}]}